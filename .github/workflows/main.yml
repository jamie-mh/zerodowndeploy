name: Build and Deploy

on:
  push:
    tags:
      - "v*"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push app image
        uses: docker/build-push-action@v5
        with:
          push: true
          context: .
          file: app.Dockerfile 
          tags: ghcr.io/jamie-mh/zerodowndeploy:latest,ghcr.io/jamie-mh/zerodowndeploy:${{ github.ref_name }}

      - name: Build and push Caddy image
        uses: docker/build-push-action@v5
        with:
          push: true
          context: .
          file: caddy.Dockerfile
          tags: ghcr.io/jamie-mh/zerodowndeploy-caddy:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up SSH
        run: |
          mkdir ~/.ssh
          echo "${{ secrets.DEPLOY_KEY }}" > ~/.ssh/deploy.key
          chmod 700 ~/.ssh
          chmod 600 ~/.ssh/deploy.key

          cat >>~/.ssh/config <<END
          Host remote
              HostName ${{ secrets.DEPLOY_HOST }}
              User ${{ secrets.DEPLOY_USER }}
              IdentityFile ~/.ssh/deploy.key
              StrictHostKeyChecking no
              ControlMaster auto
              ControlPath ~/.ssh/control-%C
              ControlPersist yes
          END

      - name: Deploy
        run: |
          prepare() {
              export DOCKER_HOST=ssh://remote
              echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin

              sed -i 's/zerodowndeploy:latest/zerodowndeploy:${{ github.ref_name }}/' compose.yaml   
          }

          pull() {
              docker compose pull
              docker compose up -d
          }

          route_traffic() {
              echo "Routing traffic to $1"
              
              case $1 in
                  "a")
                      upstreams='[{"dial":"zerodowndeploy-a:8000"}]'
                  ;;
                  "b")
                      upstreams='[{"dial":"zerodowndeploy-b:8000"}]'
                  ;;
                  "ab")
                      upstreams='[{"dial":"zerodowndeploy-a:8000"},{"dial":"zerodowndeploy-b:8000"}]'
                  ;;
              esac
              
              docker compose exec caddy curl \
                  -H "Content-Type: application/json" \
                  -d "$upstreams" \
                  -X PATCH http://localhost:2019/config/apps/http/servers/srv0/routes/0/handle/0/upstreams
          }

          restart() {
              echo "Restarting $1"
              container=zerodowndeploy-$1
              
              if ! docker compose down "$container" ; then
                  echo "Failed to stop $1"
              fi

              docker compose up -d "$container"
          }

          wait_healthy() {
              echo "Waiting for $1 to be healthy"
              container=zerodowndeploy-$1
                  
              if docker compose exec "$container" \
                  curl -I --retry 30 --retry-max-time 0 --retry-all-errors --fail-with-body http://localhost:8000/health
              then
                  echo "$1 is healthy"
              else
                  echo "$1 failed to start!"
                  exit 1
              fi
          }

          cleanup() {
              docker image prune -f
          }

          prepare
          pull

          route_traffic b
          sleep 10

          restart a
          wait_healthy a
          route_traffic a
          sleep 10

          restart b
          wait_healthy b
          route_traffic ab

          cleanup

  clean:
    runs-on: ubuntu-latest
    needs: deploy

    steps:
      - name: Delete old images
        uses: snok/container-retention-policy@v3.0.0
        with:
          account: user
          token: ${{ secrets.PAT }}
          image-names: "zerodowndeploy*"
          image-tags: "!latest v*"
          cut-off: 2d
          keep-n-most-recent: 3
